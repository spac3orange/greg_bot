from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from config import logger
from database import db
from keyboards import main_kb
from states.states import ReqMoney

router = Router()
router.message.filter(
)


@router.callback_query(F.data == 'girls_lk')
async def p_girls_lk(callback: CallbackQuery):
    await callback.answer()
    try:
        uid = callback.from_user.id
        username = callback.from_user.username
        gd = await db.get_girl_data(uid)
        g_orders, g_balance = gd['orders'], gd['balance']
        g_info = (f'<b>ID:</b> {uid}'
                  f'\n<b>–ù–∏–∫:</b> {username}'
                  f'\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:</b> {g_orders}'
                  f'\n<b>–ë–∞–ª–∞–Ω—Å:</b> {g_balance}')
        await callback.message.answer(g_info, reply_markup=main_kb.lk_menu())
    except Exception as e:
        logger.error(e)
        await callback.message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç—É.')


@router.callback_query(F.data == 'req_money')
async def p_req_money(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    uid = callback.from_user.id
    try:
        g_balance = (await db.get_girl_data(uid))['balance']
        wd_reqs = await db.get_withdraw_requests()
        for k, v in wd_reqs:
            if v == uid:
                raise ValueError
        if g_balance > 0:
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã: ')
            await state.set_state(ReqMoney.input_card)
        else:
            await callback.message.answer('<b>üî¥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - </b> 500 —Ä—É–±–ª–µ–π')
            return
    except ValueError:
        await callback.message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ - 1.'
                                      '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.')


@router.message(ReqMoney.input_card)
async def p_input_card(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.')
    else:
        uid = message.from_user.id
        username = message.from_user.username
        g_balance = (await db.get_girl_data(uid))['balance']
        await db.create_withdraw_request(uid, username, int(g_balance))
        await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω–∞.'
                             '\n–í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        await state.clear()
